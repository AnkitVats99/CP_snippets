const int N = 1e5 + 5;
int a[N] , seg[4*N];

void build(int idx, int tl, int tr) // call build(0,0,n-1)
{
    if(tl == tr) {      // leaf node
        seg[idx] = a[tl];
        return;
    }
    // move to children
    int mid = (tl + tr)/2;
    build(2*idx + 1,tl,mid);
    build(2*idx + 2,mid+1,tr);
    seg[idx] = seg[2*idx + 1] + seg[2*idx + 2];
}
int query(int idx, int tl, int tr, int l, int r)
{
    if(tr < l || tl > r)  // no overlap
    {
        return 0;
    }
    if(tl>=l && tr<=r) // complete overlap
    {
        return seg[idx];
    }
    int mid = (tl + tr)/2;
    int left = query(2*idx + 1,tl,mid,l,r);
    int right= query(2*idx + 2,mid+1,tr,l,r);
    return left + right;
}
void update(int idx,int tl, int tr, int pos, int val)
{
    if(tl == tr) // leaf node
    {
        seg[idx] = val;
        return;
    }
    int mid = (tl + tr)/2;

    if(pos <= mid)
    {
      update(2*idx+1,tl,mid,pos,val);   // move to the left children
    }
    else
    {
      update(2*idx+2,mid+1,tr,pos,val);  // move to the right children
    }
    seg[idx] = seg[2*idx + 1] + seg[2*idx + 2];
}
