const int N = 1e5 + 5;
int a[N]={0} , seg[4*N]={0} , lazy[4*N]={0};

void build(int idx, int tl, int tr) // call  build(0,0,n-1);
{
    if(tl == tr) {    // leaf node
        seg[idx] = a[tl];  
        return;
    }
    // then divide range into two parts

    int mid = (tl + tr)/2;  
    build(2*idx + 1,tl,mid);    
    build(2*idx + 2,mid+1,tr);
    seg[idx] = seg[2*idx + 1] + seg[2*idx + 2];
}
void rangeUpdate(int idx, int tl, int tr, int l, int r, int val)
{
    if(lazy[idx] != 0) 
    {
        seg[idx] = seg[idx] + (tr - tl + 1)*lazy[idx]; 
        if(tl != tr)
        {
            lazy[2*idx + 1] += lazy[idx];   // push down the lazy value to children
            lazy[2*idx + 2] += lazy[idx];
        }
        lazy[idx] = 0;
    } 
    if(tr < l || tl > r || tl > tr)   // no overlap
    {
        return;
    }
    if(tl >= l && tr <= r)    // complete overlap
    {
        seg[idx] = seg[idx] + (tr - tl + 1)*val;
        if(tl != tr)
        {
            lazy[2*idx + 1] += val;
            lazy[2*idx + 2] += val;
        }
        return;
    }
    // partial overlap
    int mid = (tl + tr)/2;
    rangeUpdate(2*idx+1,tl,mid,l,r,val);
    rangeUpdate(2*idx+2,mid+1,tr,l,r,val);
    seg[idx] = seg[2*idx+1] + seg[2*idx + 2]; 
}
int queryLazy(int idx, int tl, int tr, int l, int r)
{
    if(lazy[idx] != 0)
    {
        seg[idx] = seg[idx] + (tr - tl + 1)*lazy[idx];
        if(tl != tr)
        {
            lazy[2*idx + 1] += lazy[idx];
            lazy[2*idx + 2] += lazy[idx];
        }
        lazy[idx] = 0;
    } 
    if(tr < l || tl > r || tl > tr) // no overlap
    {
        return 0;
    }
    if(tl >= l && tr <= r)   // complete overlap
    {     
        return seg[idx];
    }
    // partial overlap
    int mid = (tl + tr)/2;
    int left = queryLazy(2*idx + 1,tl,mid,l,r);
    int right = queryLazy(2*idx + 2,mid+1,tr,l,r);
    return left + right;   
}
